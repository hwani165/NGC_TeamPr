// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyGame.Player
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct movement : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static movement GetRootAsmovement(ByteBuffer _bb) { return GetRootAsmovement(_bb, new movement()); }
  public static movement GetRootAsmovement(ByteBuffer _bb, movement obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool Verifymovement(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, movementVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public movement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyGame.Player.move_vec2? MoveVec { get { int o = __p.__offset(4); return o != 0 ? (MyGame.Player.move_vec2?)(new MyGame.Player.move_vec2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool IsDashing { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool IsGrounded { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static void Startmovement(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMoveVec(FlatBufferBuilder builder, Offset<MyGame.Player.move_vec2> moveVecOffset) { builder.AddStruct(0, moveVecOffset.Value, 0); }
  public static void AddIsDashing(FlatBufferBuilder builder, bool isDashing) { builder.AddBool(1, isDashing, false); }
  public static void AddIsGrounded(FlatBufferBuilder builder, bool isGrounded) { builder.AddBool(2, isGrounded, false); }
  public static Offset<MyGame.Player.movement> Endmovement(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyGame.Player.movement>(o);
  }
  public static void FinishmovementBuffer(FlatBufferBuilder builder, Offset<MyGame.Player.movement> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedmovementBuffer(FlatBufferBuilder builder, Offset<MyGame.Player.movement> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class movementVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MoveVec*/, 8 /*MyGame.Player.move_vec2*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*IsDashing*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*IsGrounded*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
