// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MyGame.Player
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct inputPlayerMovement : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static inputPlayerMovement GetRootAsinputPlayerMovement(ByteBuffer _bb) { return GetRootAsinputPlayerMovement(_bb, new inputPlayerMovement()); }
  public static inputPlayerMovement GetRootAsinputPlayerMovement(ByteBuffer _bb, inputPlayerMovement obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyinputPlayerMovement(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, inputPlayerMovementVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public inputPlayerMovement __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MyGame.Player.MoveVec? MoveVec { get { int o = __p.__offset(4); return o != 0 ? (MyGame.Player.MoveVec?)(new MyGame.Player.MoveVec()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public byte MovementState { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static void StartinputPlayerMovement(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMoveVec(FlatBufferBuilder builder, Offset<MyGame.Player.MoveVec> moveVecOffset) { builder.AddStruct(0, moveVecOffset.Value, 0); }
  public static void AddMovementState(FlatBufferBuilder builder, byte movementState) { builder.AddByte(1, movementState, 0); }
  public static Offset<MyGame.Player.inputPlayerMovement> EndinputPlayerMovement(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MyGame.Player.inputPlayerMovement>(o);
  }
  public static void FinishinputPlayerMovementBuffer(FlatBufferBuilder builder, Offset<MyGame.Player.inputPlayerMovement> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedinputPlayerMovementBuffer(FlatBufferBuilder builder, Offset<MyGame.Player.inputPlayerMovement> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class inputPlayerMovementVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MoveVec*/, 2 /*MyGame.Player.MoveVec*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*MovementState*/, 1 /*byte*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
